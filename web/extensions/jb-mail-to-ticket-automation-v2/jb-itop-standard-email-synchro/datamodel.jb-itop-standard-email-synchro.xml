<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.6">
	<classes>
		<class id="MailInboxStandard" _delta="define">
			<parent>MailInboxBase</parent>
			<properties>
				<category>searchable,view_in_gui,bizmodel</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>mailinbox_standard</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field>realclass</db_final_class_field>
				<naming>
					<format>%1$s</format>
					<attributes>
						<attribute id="login"/>
					</attributes>
				</naming>
				<display_template/>
				<icon>images/mailbox.png</icon>
				<reconciliation>
					<attributes>
						<attribute id="server"/>
						<attribute id="login"/>
						<attribute id="protocol"/>
						<attribute id="mailbox"/>
						<attribute id="port"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="behavior" xsi:type="AttributeEnum">
					<values>
						<value>create_only</value>
						<value>update_only</value>
						<value>both</value>
					</values>
					<sql>behavior</sql>
					<default_value>both</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="target_class" xsi:type="AttributeEnum">
					<values>
						<value>Incident</value>
						<value>UserRequest</value>
						<value>Change</value>
						<value>RoutineChange</value>
						<value>NormalChange</value>
						<value>EmergencyChange</value>
						<value>Problem</value>
					</values>
					<sql>target_class</sql>
					<default_value>UserRequest</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="ticket_default_values" xsi:type="AttributeText">
					<sql>ticket_default_values</sql>
					<default_value>
<![CDATA[impact:3
agent_id:1
team_id:1
status:assigned]]>
					</default_value>
					<is_null_allowed>true</is_null_allowed>
				</field> 
				<field id="title_pattern" xsi:type="AttributeString">
					<sql>title_pattern</sql>
					<default_value>/R-([0-9]{6})/</default_value>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="title_pattern_ignore_patterns" xsi:type="AttributeText">
					<sql>title_pattern_ignore_patterns</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>

				<field id="error_behavior" xsi:type="AttributeEnum">
					<values>
						<value>delete</value>
						<value>mark_as_error</value>
					</values>
					<sql>error_behavior</sql>
					<default_value>mark_as_error</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="notify_errors_to" xsi:type="AttributeEmailAddress">
					<sql>notify_errors_to</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>

				<field id="notify_from" xsi:type="AttributeEmailAddress">
					<sql>notify_from</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="mail_aliases" xsi:type="AttributeText">
					<sql>mail_aliases</sql>
					<default_value></default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>


				<field id="trace" xsi:type="AttributeEnum">
					<values>
						<value>yes</value>
						<value>no</value>
					</values>
					<sql>trace</sql>
					<default_value>no</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="debug_trace" xsi:type="AttributeLongText">
					<sql>debug_trace</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="email_storage" xsi:type="AttributeEnum">
					<values>
						<value>keep</value>
						<value>delete</value>
					</values>
					<sql>email_storage</sql>
					<default_value>keep</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>

				<field id="stimuli" xsi:type="AttributeText">
					<sql>stimuli</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>		

		<!-- All policy options -->
			<!-- Mail size (attachments) too big -->
				<field id="policy_mail_size_too_big_behavior" xsi:type="AttributeEnum">
					<values>								
						<value>bounce_delete</value>
						<value>bounce_mark_as_undesired</value>
						<value>delete</value>
						<value>do_nothing</value>
						<value>mark_as_undesired</value>
					</values>
					<sql>policy_mail_size_too_big_behavior</sql>
					<default_value>do_nothing</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_mail_size_too_big_subject" xsi:type="AttributeString">
					<sql>policy_mail_size_too_big_subject</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_mail_size_too_big_notification" xsi:type="AttributeHTML">
					<sql>policy_mail_size_too_big_notification</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_mail_size_too_big_max_size_MB" xsi:type="AttributeInteger">
					<sql>policy_mail_size_too_big_max_size_MB</sql> 
					<default_value>10</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
			<!-- Attachments - image dimensions -->
				<field id="policy_attachment_image_dimensions_min_width" xsi:type="AttributeInteger">
					<sql>policy_attachment_image_dimensions_min_width</sql>
					<default_value>100</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_attachment_image_dimensions_min_height" xsi:type="AttributeInteger">
					<sql>policy_attachment_image_dimensions_min_height</sql>
					<default_value>100</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_attachment_image_dimensions_max_width" xsi:type="AttributeInteger">
					<sql>policy_attachment_image_dimensions_max_width</sql>
					<default_value>1000</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_attachment_image_dimensions_max_height" xsi:type="AttributeInteger">
					<sql>policy_attachment_image_dimensions_max_height</sql>
					<default_value>1000</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
			<!-- Forbidden e-mail attachments -->
				<field id="policy_attachment_forbidden_mimetype_behavior" xsi:type="AttributeEnum">
					<values>
						<value>bounce_delete</value> 
						<value>bounce_mark_as_undesired</value>
						<value>delete</value>
						<value>do_nothing</value>
						<value>fallback_ignore_forbidden_attachments</value>
						<value>mark_as_undesired</value>
					</values>
					<sql>policy_attachment_forbidden_mimetype_behavior</sql>
					<default_value>do_nothing</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_attachment_forbidden_mimetype_subject" xsi:type="AttributeString">
					<sql>policy_attachment_forbidden_mimetype_subject</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_attachment_forbidden_mimetype_notification" xsi:type="AttributeHTML">
					<sql>policy_attachment_forbidden_mimetype_notification</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_attachment_forbidden_mimetype_mimetypes" xsi:type="AttributeText">
					<sql>policy_attachment_forbidden_mimetype_mimetypes</sql>
					<default_value>application/exe</default_value>
					<is_null_allowed>true</is_null_allowed>
				</field>
			<!-- No subject. -->
				<field id="policy_no_subject_behavior" xsi:type="AttributeEnum">
					<values>
						<value>bounce_delete</value>
						<value>bounce_mark_as_undesired</value> 
						<value>delete</value>
						<value>do_nothing</value>
						<value>fallback_default_subject</value>
						<value>mark_as_undesired</value>
					</values>
					<sql>policy_no_subject_behavior</sql>
					<default_value>do_nothing</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_no_subject_subject" xsi:type="AttributeString">
					<sql>policy_no_subject_subject</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_no_subject_notification" xsi:type="AttributeHTML">
					<sql>policy_no_subject_notification</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_no_subject_default_value" xsi:type="AttributeString">
					<sql>policy_no_subject_default_value</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
			<!-- Unknown caller -->
				<field id="policy_unknown_caller_behavior" xsi:type="AttributeEnum">
					<values>
						<value>bounce_delete</value>
						<value>bounce_mark_as_undesired</value> 
						<value>delete</value> 
						<value>do_nothing</value>
						<value>fallback_create_person</value>
						<value>mark_as_undesired</value>
					</values>
					<sql>policy_unknown_caller_behavior</sql>
					<default_value>do_nothing</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_unknown_caller_subject" xsi:type="AttributeString">
					<sql>policy_unknown_caller_subject</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_unknown_caller_notification" xsi:type="AttributeHTML">
					<sql>policy_unknown_caller_notification</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_unknown_caller_default_values" xsi:type="AttributeText">
					<sql>policy_unknown_caller_default_values</sql>
					<default_value>
<![CDATA[impact:3
org_id:1
first_name:-
name:Unknown caller - $mail->caller_name$]]>
					</default_value>
					<is_null_allowed>true</is_null_allowed>
				</field>
			<!-- Additional contacts -->
				<field id="policy_other_recipients_behavior" xsi:type="AttributeEnum">
					<values>
						<value>bounce_delete</value>
						<value>bounce_mark_as_undesired</value> 
						<value>delete</value>
						<value>do_nothing</value>
						<value>fallback_add_other_contacts</value>
						<value>fallback_add_existing_other_contacts</value>
						<value>fallback_ignore_other_contacts</value>
						<value>mark_as_undesired</value>
					</values>
					<sql>policy_other_recipients_behavior</sql>
					<default_value>do_nothing</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_other_recipients_subject" xsi:type="AttributeString">
					<sql>policy_other_recipients_subject</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_other_recipients_notification" xsi:type="AttributeHTML">
					<sql>policy_other_recipients_notification</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_other_recipients_default_values" xsi:type="AttributeText">
					<sql>policy_other_recipients_default_values</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
			<!-- Reference to closed ticket -->
				<field id="policy_ticket_closed_behavior" xsi:type="AttributeEnum">
					<values>
						<value>fallback_reopen</value>
						<value>mark_as_undesired</value>
						<value>delete</value>
						<value>do_nothing</value>
						<value>bounce_delete</value>
						<value>bounce_mark_as_undesired</value> 
					</values>
					<sql>policy_ticket_closed_behavior</sql>
					<default_value>do_nothing</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_ticket_closed_subject" xsi:type="AttributeString">
					<sql>policy_ticket_closed_subject</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_ticket_closed_notification" xsi:type="AttributeHTML">
					<sql>policy_ticket_closed_notification</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
			<!-- Reference to resolved ticket -->
				<field id="policy_ticket_resolved_behavior" xsi:type="AttributeEnum">
					<values>
						<value>bounce_delete</value>
						<value>bounce_mark_as_undesired</value> 
						<value>delete</value>
						<value>do_nothing</value>
						<value>fallback_reopen</value>
						<value>mark_as_undesired</value>
					</values>
					<sql>policy_ticket_resolved_behavior</sql>
					<default_value>do_nothing</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_ticket_resolved_subject" xsi:type="AttributeString">
					<sql>policy_ticket_resolved_subject</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_ticket_resolved_notification" xsi:type="AttributeHTML">
					<sql>policy_ticket_resolved_notification</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
			<!-- Reference to non-existing ticket -->
				<field id="policy_ticket_unknown_behavior" xsi:type="AttributeEnum">
					<values> 
						<value>bounce_delete</value>
						<value>bounce_mark_as_undesired</value> 
						<value>delete</value>
						<value>do_nothing</value>
						<value>mark_as_undesired</value>
					</values>
					<sql>policy_ticket_unknown_behavior</sql>
					<default_value>do_nothing</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_ticket_unknown_subject" xsi:type="AttributeString">
					<sql>policy_ticket_unknown_subject</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_ticket_unknown_notification" xsi:type="AttributeHTML">
					<sql>policy_ticket_unknown_notification</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
			<!-- Undesired title pattern, reject entire e-mail -->
				<field id="policy_undesired_pattern_behavior" xsi:type="AttributeEnum">
					<values> 
						<value>bounce_delete</value>
						<value>bounce_mark_as_undesired</value> 
						<value>delete</value>
						<value>do_nothing</value>
						<value>mark_as_undesired</value>
					</values>
					<sql>policy_undesired_pattern_behavior</sql>
					<default_value>do_nothing</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="policy_undesired_pattern_subject" xsi:type="AttributeString">
					<sql>policy_undesired_pattern_subject</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_undesired_pattern_notification" xsi:type="AttributeHTML">
					<sql>policy_undesired_pattern_notification</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="policy_undesired_pattern_patterns" xsi:type="AttributeText">
					<sql>policy_undesired_pattern_patterns</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
			<!-- Avoid title pattern conflicts by removing subject parts -->
				<field id="policy_remove_pattern_behavior" xsi:type="AttributeEnum">
					<values>
						<value>do_nothing</value>
						<value>fallback_remove</value>
					</values>
					<sql>policy_remove_pattern_behavior</sql>
					<default_value>do_nothing</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field> 
				<field id="policy_remove_pattern_patterns" xsi:type="AttributeText">
					<sql>policy_remove_pattern_patterns</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>

			</fields>

			<methods>
				<method id="DisplayBareRelations">
					<comment>/**
	 * Add an extra tab showing the debug trace
	 * @see cmdbAbstractObject::DisplayBareRelations()
	 */</comment>
					<static>false</static>
					<access>public</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[	function DisplayBareRelations(WebPage $oPage, $bEditMode = false)
	{
		parent::DisplayBareRelations($oPage, $bEditMode);
		if (!$bEditMode)
		{
			$oPage->SetCurrentTab(Dict::S('MailInboxStandard:DebugTrace'));
			$sAjaxUrl = addslashes(utils::GetAbsoluteUrlModulesRoot().basename(dirname(__FILE__)).'/ajax.php');
			$iId = $this->GetKey();
			if ($this->Get('trace') == 'yes')
			{
				$oPage->add('<p><button type="button" id="debug_trace_refresh">'.Dict::S('UI:Button:Refresh').'</button></p>');
				$oPage->add('<div id="debug_trace_output"></div>');
				$oPage->add_ready_script(
<<<EOF
$('#debug_trace_refresh').click(function() {
	$('#debug_trace_output').html('<img src="../images/indicator.gif"/>');
	$.post('$sAjaxUrl', {operation: 'debug_trace', id: $iId }, function(data) {
		$('#debug_trace_output').html(data);
	});
});
$('#debug_trace_refresh').trigger('click');
EOF
				);
			}
			else
			{
				$oPage->add('<div id="debug_trace_output"><p>'.Dict::S('MailInboxStandard:DebugTraceNotActive').'</p></div>');
			}
		}
	}]]></code>
				</method>
				<method id="Trace">
					<comment>/**
	 * Debug trace: activated/disabled by the configuration flag set for the base module...
	 * @param string $sText
	 */</comment>
					<static>false</static>
					<access>public</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[	public function Trace($sText)
	{
	
		parent::Trace($sText);
		$iMaxTraceLength = 500*1024; // Maximum size of the Trace to keep in the database...
		
		if ($this->Get('trace') == 'yes')
		{
			// htmlentities($sText) might be applied again on AJAX page.
			$sStampedText = date('Y-m-d H:i:s').' - '.$sText."\n";
			$this->Set('debug_trace', $sStampedText.mb_substr($this->Get('debug_trace'), 0, $iMaxTraceLength));
			$this->DBUpdate();
		}
	}]]></code>
				</method>
				<method id="RecordAttChanges">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function RecordAttChanges(array $aValues, array $aOrigValues)
	{
		// Do NOT record the changes on the 'debug trace' attribute
		unset($aValues['debug_trace']);
		parent::RecordAttChanges($aValues, $aOrigValues);
	}]]></code>
				</method>
				<method id="DispatchEmail">
					<comment>/**
	 * Initial dispatching of an incoming email: determines what to do with the email
	 * @param EmailReplica $oEmailReplica The EmailReplica associated with the email. A new replica (i.e. not yet in DB) one for new emails
	 * @return int An action code from \EmailProcessor
	 */</comment>
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[		public function DispatchEmail(EmailReplica $oEmailReplica)
	{
	
		return parent::DispatchEmail($oEmailReplica);
						  
	}
		]]></code>
				</method>
				<method id="ProcessNewEmail">
					<comment>/**
	 * Process an new (unread) incoming email
	 * @param EmailSource $oSource The source from which this email was read
	 * @param int $index The index of the message in the source
	 * @param EmailMessage $oEmail The decoded email
	 * @return Ticket|null The ticket created or updated in response to the email or null on error
	 */</comment>
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	public function ProcessNewEmail(EmailSource $oSource, $index, EmailMessage $oEmail)
	{		
	    $this->sLastError = null;
		$this->Trace("Processing new e-mail ( index = $index )"); 
		$this->Trace(". UIDL ".htmlspecialchars($oEmail->sUIDL));
		$this->Trace(". Message-ID ".htmlspecialchars ($oEmail->sMessageId));
				
		// Contrary to Combodo's implementation: first check if there is any iTop object mentioned in the headers of the e-mail
		// This fork contains policies which might reopen closed/resolved tickets and therefore needs the Ticket object.
        // Check whether a new ticket must be initiated or an existing one updated.
        $oTicket = $this->GetRelatedTicket($oEmail);

		$oTicket = $this->ProcessPolicies($oEmail, $oTicket);

		return $oTicket;
		
	}]]></code>
				</method>
				<method id="GetRelatedTicket">
					<comment>/**
	 * 
	 * {@inheritDoc}
	 * @see MailInboxBase::GetRelatedTicket()
	 */</comment>
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function GetRelatedTicket(EmailMessage $oEmail)
	{
		// First check if there is any iTop object mentioned in the headers of the eMail
		$oTicket = parent::GetRelatedTicket($oEmail);
		
		if ( $oTicket == null )
		{
			
			// To find the reference, make sure subject is handled in same way as original ticket (removing unwanted pattern)
			$sSubject = $oEmail->sSubject;
			
			// Here it's possible to ignore patterns.
			// @todo Move this to a policy.
		
			$sPatterns = $this->Get('title_pattern_ignore_patterns');
			
			if(trim($sPatterns) != '') {
				
				$aPatterns = explode('/\\r\\n|\\r|\\n/', $sPatterns);
				
				$this->Trace(".. GetRelatedTicket() - Ignoring patterns: {$sPatterns}");
				
				foreach($aPatterns as $sPattern) {
					if(trim($sPattern) != '') {
						$oPregMatch = @preg_match($sPattern, $sSubject);
						
						if( $oPregMatch === false) {
							$this->Trace("... Invalid pattern: '{$sPattern}'");
						}
						elseif(preg_match($sPattern, $sSubject)) {
							$this->Trace("... Removing: '{$sPattern}'");
							$sSubject = preg_replace($sPattern, '', $sSubject);
						}
						else {
							// Just not matching
						}
					}
				}
			}
			
			// No associated ticket found by parsing the headers, check if the subject matches a specific pattern
			$sPattern = $this->FixPattern($this->Get('title_pattern'));
			
			if(($sPattern != '') && (preg_match($sPattern, $sSubject, $aMatches)))
			{
				$iTicketId = 0;
				foreach($aMatches as $sMatch) {
					$sMatch = preg_replace('/[^\d]/', '', $sMatch);
					sscanf($sMatch, '%d', $iTicketId);
					if ($iTicketId != 0)
					{
						break;
					}
                }
				
				// @todo Might need to be revised if there's a per-class counter (commits 2.7.0)
				$this->Trace("iTop Simple Email Synchro: Retrieving ticket {$iTicketId} (match by subject pattern)...");
				$oTicket = MetaModel::GetObject('Ticket', $iTicketId, false);
			}
		}		
		
		return $oTicket;
	}]]></code>
				</method>
				<method id="HandleError">
					<comment>/**
	 * Error handler... what to do in case of error ??
	 * @param EmailMessage $oEmail can be null in case of decoding error (like message too big)
	 * @param string $sErrorCode
	 * @return void
	 */</comment>
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	public function HandleError($oEmail, $sErrorCode, $oRawEmail = null, $sAdditionalErrorMessage = '')
	{
	
		$sTo = $this->Get('notify_errors_to');
		$sFrom = $this->Get('notify_from');
		// The behavior is overriden in case of undesired_message
		if ($this->Get('error_behavior') == 'delete')
		{
			$this->SetNextAction(\EmailProcessor::DELETE_MESSAGE); // Remove the message from the mailbox
			$sLastAction = "<p>The eMail was deleted from the mailbox.</p>\n";
		}
		else
		{
			$this->SetNextAction(\EmailProcessor::MARK_MESSAGE_AS_ERROR); // Keep the message in the mailbox, but marked as error
			$sLastAction = "<p>The eMail is marked as error and will be ignored in further processing of the mailbox.</p>\n";
		}
		
		switch($sErrorCode)
		{
			case 'decode_failed':
			
				$sSubject = '[iTop] Failed to decode an incoming eMail';
				if ($oRawEmail && ($oRawEmail->GetSize() > EmailBackgroundProcess::$iMaxEmailSize))
				{
					$sBody = "<p>The incoming eMail is bigger (".$oRawEmail->GetSize()." bytes) than the maximum configured size (maximum_email_size = ".EmailBackgroundProcess::$iMaxEmailSize.").</p>\n";
					$this->sLastError = "eMail is bigger (".$oRawEmail->GetSize()." bytes) than the maximum configured size (maximum_email_size = ".EmailBackgroundProcess::$iMaxEmailSize.")";
					
					if ($this->Get('error_behavior') == 'delete')
					{
						if ($this->sBigFilesDir == '')
						{
							$sBody .= "<p>The email was deleted. In the future you can:\n<ul>\n";
							$sBody .= "<li>either increase the 'maximum_email_size' parameter in the iTop configuration file, so that the message gets processed</li>\n";
							$sBody .= "<li>or configure the parameter 'big_files_dir' in the iTop configuration file, so that such emails are kept on the web server for further inspection.</li>\n</ul>";
						}
						else if (!is_writable($this->sBigFilesDir))
						{
							$sBody .= "<p>The email was deleted, since the directory where to save such files on the web server ($this->sBigFilesDir) is NOT writable to iTop.</p>\n";
						}
						else
						{
							$idx = 1;
							$sFileName = 'email_'.(date('Y-m-d')).'_';
							$sExtension = '.eml';
							$hFile = false;
							while(($hFile = fopen($this->sBigFilesDir.'/'.$sFileName.$idx.$sExtension, 'x')) === false)
							{
								$idx++;
							}
							fwrite($hFile, $oRawEmail->GetRawContent());
							fclose($hFile);
							$sBody .= "<p>The message was saved as '{$sFileName}{$idx}{$sExtension}' on the web server, in the directory '{$this->sBigFilesDir}'.</p>\n";
							$sBody .= "<p>In order process such messages, increase the value of the 'maximum_email_size' parameter in the iTop configuration file.</p>\n";
						}
					}
					else
					{
						$sBody .= $sLastAction;
					}
									
					$oRawEmail = null; // Do not attach the original message to the mail sent to the admin since it's already big, send the message now
					$this->Trace($sSubject."\n\n".$sBody);
					// Send the email now...
					if(($sTo != '') && ($sFrom != ''))
					{
						$oEmailToSend = new Email();
						$oEmailToSend->SetRecipientTO($sTo);
						$oEmailToSend->SetSubject($sSubject);
						$oEmailToSend->SetBody($sBody, 'text/html');	
						$oEmailToSend->SetRecipientFrom($sFrom);
						$oEmailToSend->Send($aIssues, true /* bForceSynchronous */, null /* $oLog */);
					}
				}
				else
				{
					$sBody = "<p>The following eMail (see attachment) was not decoded properly and therefore was not processed at all.</p>\n";
					$sBody .= $sLastAction;
				}
			break;
			
			
			case 'failed_to_create_contact':
			
				$sSubject = '[iTop] Failed to create a contact for the incoming eMail - '.$oEmail->sSubject;
				$sBody = "<p>The following email (see attachment) comes from an unknown caller (".$oEmail->sCallerEmail.").<br/>\n";
				$sBody .= "The configuration of the Mail Inbox ".$this->GetName()." instructs to create a new contact based on some default values, but this creation was not successful.<br/>\n";
				$sBody .= "Check the contact's default values configured in the Mail Inbox.</p>\n";
				$sBody .= $sLastAction;
				$this->sLastError = "Failed to create a contact from the incoming eMail. Caller = ".$oEmail->sCallerEmail;
				break;
			
			case 'rejected_attachments':
			
				$sSubject = '[iTop] Failed to process attachment(s) for the incoming eMail - '.$oEmail->sSubject;
				$sBody = "<p>Some attachments to the eMail were not processed because they are too big:</p>\n";
				$this->sLastError = $sAdditionalErrorMessage;
				$sBody .= "<pre>".$sAdditionalErrorMessage."</pre>\n";
				$sBody .= $sLastAction;
				
				$oRawEmail = null; // No original message in attachment
				$this->Trace($sSubject."\n\n".$sBody);
				// Send the email now...
				if(($sTo != '') && ($sFrom != ''))
				{
					$oEmailToSend = new Email();
					$oEmailToSend->SetRecipientTO($sTo);
					$oEmailToSend->SetSubject($sSubject);
					$oEmailToSend->SetBody($sBody, 'text/html');	
					$oEmailToSend->SetRecipientFrom($sFrom);
					$oEmailToSend->Send($aIssues, true /* bForceSynchronous */, null /* $oLog */);
				}
				break;
			 
			case 'undesired_message':
			
				$sSubject = '[iTop] Undesired message - '.$oEmail->sSubject;
				$sBody = "<p>The attached message was rejected because it is considered as undesired, based on the 'undesired_subject_patterns' specified in the iTop configuration file.</p>\n";
				$sBody .= $sLastAction;
				
				// Send the email now...
				if(($sTo != '') && ($sFrom != ''))
				{
					$oEmailToSend = new Email();
					$oEmailToSend->SetRecipientTO($sTo);
					$oEmailToSend->SetSubject($sSubject);
					$oEmailToSend->SetBody($sBody, 'text/html');	
					$oEmailToSend->SetRecipientFrom($sFrom);
					$oEmailToSend->Send($aIssues, true /* bForceSynchronous */, null /* $oLog */);
				}
				break;
				
			case 'undesired_message':
				if(\MetaModel::GetModuleSetting('jb-email-synchro', 'undesired_purge_delay', 7) == 0) {
					$this->SetNextAction(\EmailProcessor::DELETE_MESSAGE); // immediate delete when delay is 0
				}
				else {
					$this->SetNextAction(\EmailProcessor::MARK_MESSAGE_AS_UNDESIRED); // Keep the message in the mailbox, but marked as undesired
				}
				$this->sLastError = 'Undesired email';
				$oRawEmail = null; // No feedback on undesired emails
				break;
				
			
			default:
				$sSubject = '[iTop] handle error';
				$sBody = '<p>Unexpected error: '.$sErrorCode."</p>\n";
				$sBody .= $sLastAction;
				$this->sLastError = 'Unexpected error: '.$sErrorCode;
		}
		$sBody .= "<p>&nbsp;</p><p>Mail Inbox Configuration: ".$this->GetHyperlink()."</p>\n";
		
		if(($sTo == '') || ($sFrom == ''))
		{
			$this->Trace("HandleError($sErrorCode): No forward configured for forwarding the email...(To: '$sTo', From: '$sFrom'), skipping.");
		}
		else if($oRawEmail)
		{
			$this->Trace($sSubject."\n\n".$sBody);
			$oRawEmail->SendAsAttachment($sTo, $sFrom, $sSubject, $sBody);
		}
	}]]></code>
				</method>
				<method id="ProcessPolicies">
					<comment><![CDATA[/**
	 * Check all policies to see if the email is considered as "undesired"
	 * @param \EmailMessage $oEmail The message to check
	 *
	 * @return \Ticket|null Ticket object (or subclass of Ticket) or null
	 *
	 * @throws \Exception
	 */]]></comment>
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function ProcessPolicies(EmailMessage $oEmail, $oTicket)
	{
		
		$oCaller = null;
		
		// Process all policies
		$aPolicyClasses = [];
		foreach (get_declared_classes() as $sClassName) {
		
			if(in_array('jb_itop_extensions\mail_to_ticket\iPolicy', class_implements($sClassName))) {
				$aPolicyClasses[] = $sClassName;
			}
			
		}
		
		$this->Trace('.. '.count($aPolicyClasses).' policies to process...');
			
		// Policies must be executed in a certain order.
		// Some policies may set info on the Ticket or derive the caller; 
		// other policies may block further processing.
		// The order in which these actions are executed, is important.
		usort($aPolicyClasses, function($sClassNameA, $sClassNameB) {
			return $sClassNameA::$iPrecedence <=> $sClassNameB::$iPrecedence;
		});
		
		$aPreviouslyExecutedPolicies = [];
		
		foreach($aPolicyClasses as $sPolicy) {
		
			// Always overrule each time this is used. Avoid leftovers from previous e-mails!
			$sPolicy::Init($this, $oEmail, $oTicket, $aPreviouslyExecutedPolicies);
			
			// As soon as there is one policy where IsCompliant() returns false: cancel further processing.
			// Any other policy violation handling should have been performed by the class implementing the iPolicy interface.
			if($sPolicy::IsCompliant() == false) {
				// Being incompliant = mark as undesired email
				$this->SetNextAction(\EmailProcessor::MARK_MESSAGE_AS_UNDESIRED);
				return; // Stop further processing
			}
			
			$aPreviouslyExecutedPolicies[] = $sPolicy;
			
			// At some point (PolicyCreateOrUpdateTicket), a new Ticket might have been created.
			$oTicket = $sPolicy::$oTicket;
		
		}
		
		return $oTicket;
		
	}]]></code>
				</method>



				<method id="FixPattern">
					<comment>/**
	 * Make sure that the given string is a proper PCRE pattern by surrounding
	 * it with slashes, if needed
	 * @param string $sPattern The pattern to check (can be an empty string)
	 * @return string The valid pattern (or an empty string)
	 */</comment>
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	public function FixPattern($sPattern)
	{
		$sReturn = $sPattern;
		if ($sPattern != '')
		{
			$sFirstChar = substr($sPattern, 0, 1);
			$sLastChar = substr($sPattern, -1, 1);
			if (($sFirstChar != $sLastChar) || preg_match('/[0-9A-Z-a-z]/', $sFirstChar) || preg_match('/[0-9A-Z-a-z]/', $sLastChar))
			{
				// Missing delimiter patterns
				$sReturn = '/'.$sPattern.'/';
			}
		}
		return $sReturn;
	}]]></code>
				</method>
			</methods>
			<presentation>
				<details>
					<items>
						<!-- Mailbox settings -->
						<item id="fieldset:MailInbox:Server">
							<rank>10</rank>
							<items>
								<item id="server">
									<rank>10</rank>
								</item>
								<item id="login">
									<rank>20</rank>
								</item>
								<item id="password">
									<rank>30</rank>
								</item>
								<item id="protocol">
									<rank>40</rank>
								</item>
								<item id="port">
									<rank>50</rank>
								</item>
								<item id="mailbox">
									<rank>60</rank>
								</item>
								<item id="notify_from">
									<rank>70</rank>
								</item>
								<item id="active">
									<rank>80</rank>
								</item>
								<item id="trace">
									<rank>90</rank>
								</item>
								<item id="mail_aliases">
									<rank>100</rank>
								</item>
							</items>
						</item>

						<!-- Default behavior and class -->
						<item id="fieldset:MailInbox:Behavior">
							<rank>20</rank>
							<items>
								<item id="behavior">
									<rank>10</rank>
								</item>
								<item id="email_storage">
									<rank>20</rank>
								</item>
								<item id="target_class">
									<rank>30</rank>
								</item>
								<item id="ticket_default_values">
									<rank>40</rank>
								</item>
								<item id="title_pattern">
									<rank>60</rank>
								</item>
								<item id="title_pattern_ignore_patterns">
									<rank>61</rank>
								</item> 
								<item id="stimuli">
									<rank>70</rank>
								</item>
							</items>
						</item>

						<!-- Errors in processing -->
						<item id="fieldset:MailInbox:Errors">
							<rank>30</rank>
							<items>
								<item id="error_behavior">
									<rank>10</rank>
								</item>
								<item id="notify_errors_to">
									<rank>20</rank>
								</item>
							</items>
						</item>

						<!-- Mail (attachments) size too large -->
						<item id="fieldset:MailInbox:PolicyMailSize">
							<rank>110</rank>
							<items>
								<item id="policy_mail_size_too_big_behavior">
									<rank>10</rank>
								</item>
								<item id="policy_mail_size_too_big_subject">
									<rank>15</rank>
								</item>
								<item id="policy_mail_size_too_big_notification">
									<rank>20</rank>
								</item>
								<item id="policy_mail_size_too_big_max_size_MB">
									<rank>30</rank>
								</item>
							</items>
						</item> 

						<!-- Image attachments: min/max dimensions -->
						<item id="fieldset:MailInbox:PolicyAttachmentImageDimensions">
							<rank>120</rank>
							<items>
								<item id="policy_attachment_image_dimensions_min_width">
									<rank>10</rank>
								</item>
								<item id="policy_attachment_image_dimensions_max_width">
									<rank>15</rank>
								</item>
								<item id="policy_attachment_image_dimensions_min_height">
									<rank>20</rank>
								</item>
								<item id="policy_attachment_image_dimensions_max_height">
									<rank>30</rank>
								</item>
							</items>
						</item>

						<!-- Mail (attachments) size too large -->
						<item id="fieldset:MailInbox:PolicyAttachmentForbiddenMimeType">
							<rank>120</rank>
							<items>
								<item id="policy_attachment_forbidden_mimetype_behavior">
									<rank>10</rank>
								</item>
								<item id="policy_attachment_forbidden_mimetype_subject">
									<rank>15</rank>
								</item>
								<item id="policy_attachment_forbidden_mimetype_notification">
									<rank>20</rank>
								</item>
								<item id="policy_attachment_forbidden_mimetype_mimetypes">
									<rank>30</rank>
								</item>
							</items>
						</item> 

						<!-- No subject -->
						<item id="fieldset:MailInbox:PolicyNoSubject">
							<rank>130</rank>
							<items>
								<item id="policy_no_subject_behavior">
									<rank>10</rank>
								</item>
								<item id="policy_no_subject_subject">
									<rank>15</rank>
								</item>
								<item id="policy_no_subject_notification">
									<rank>20</rank>
								</item>
								<item id="policy_no_subject_default_value">
									<rank>30</rank>
								</item>
							</items>
						</item> 

						<!-- Closed ticket -->
						<item id="fieldset:MailInbox:PolicyClosedTicket">
							<rank>140</rank>
							<items>
								<item id="policy_ticket_closed_behavior">
									<rank>10</rank>
								</item>
								<item id="policy_ticket_closed_subject">
									<rank>15</rank>
								</item>
								<item id="policy_ticket_closed_notification">
									<rank>20</rank>
								</item> 
							</items>
						</item> 

						<!-- Resolved ticket -->
						<item id="fieldset:MailInbox:PolicyResolvedTicket">
							<rank>141</rank>
							<items>
								<item id="policy_ticket_resolved_behavior">
									<rank>10</rank>
								</item>
								<item id="policy_ticket_resolved_subject">
									<rank>15</rank>
								</item>
								<item id="policy_ticket_resolved_notification">
									<rank>20</rank>
								</item> 
							</items>
						</item> 

						<!-- Unknown ticket -->
						<item id="fieldset:MailInbox:PolicyUnknownTicket">
							<rank>150</rank>
							<items>
								<item id="policy_ticket_unknown_behavior">
									<rank>10</rank>
								</item>
								<item id="policy_ticket_unknown_subject">
									<rank>15</rank>
								</item>
								<item id="policy_ticket_unknown_notification">
									<rank>20</rank>
								</item> 
							</items>
						</item> 

						<!-- Unknown caller -->
						<item id="fieldset:MailInbox:PolicyUnknownCaller">
							<rank>160</rank>
							<items>
								<item id="policy_unknown_caller_behavior">
									<rank>10</rank>
								</item>
								<item id="policy_unknown_caller_subject">
									<rank>15</rank>
								</item>
								<item id="policy_unknown_caller_notification">
									<rank>20</rank>
								</item>
								<item id="policy_unknown_caller_default_values">
									<rank>30</rank>
								</item>
							</items>
						</item> 

						<!-- Other contacts -->
						<item id="fieldset:MailInbox:PolicyOtherRecipients">
							<rank>170</rank>
							<items>
								<item id="policy_other_recipients_behavior">
									<rank>10</rank>
								</item>
								<item id="policy_other_recipients_subject">
									<rank>15</rank>
								</item>
								<item id="policy_other_recipients_notification">
									<rank>20</rank>
								</item> 
							</items>
						</item> 

						<!-- Undesired pattern behavior -->
						<item id="fieldset:MailInbox:PolicyUndesiredPattern">
							<rank>180</rank>
							<items>
								<item id="policy_undesired_pattern_behavior">
									<rank>10</rank>
								</item>
								<item id="policy_undesired_pattern_subject">
									<rank>15</rank>
								</item>
								<item id="policy_undesired_pattern_notification">
									<rank>20</rank>
								</item> 
								<item id="policy_undesired_pattern_patterns">
									<rank>30</rank>
								</item> 
							</items>
						</item> 

						<!-- Remove pattern from subject behavior -->
						<item id="fieldset:MailInbox:PolicyRemovePattern">
							<rank>190</rank>
							<items>
								<item id="policy_remove_pattern_behavior">
									<rank>10</rank>
								</item> 
								<item id="policy_remove_pattern_patterns">
									<rank>20</rank>
								</item> 
							</items>
						</item> 

					</items>
				</details>
				<search>
					<items>
						<item id="server">
							<rank>10</rank>
						</item>
						<item id="login">
							<rank>20</rank>
						</item>
						<item id="mailbox">
							<rank>30</rank>
						</item>
						<item id="protocol">
							<rank>40</rank>
						</item>
						<item id="active">
							<rank>50</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="server">
							<rank>10</rank>
						</item>
						<item id="mailbox">
							<rank>20</rank>
						</item>
						<item id="protocol">
							<rank>30</rank>
						</item>
						<item id="active">
							<rank>40</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
	</classes>
	<menus>
		<menu xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Configuration" xsi:type="MenuGroup" _delta="define_if_not_exists">
			<rank>90</rank>
		</menu>
		<menu id="MailInboxes" xsi:type="OQLMenuNode" _delta="define">
			<rank>20</rank>
			<parent>ConfigurationTools</parent>
			<oql><![CDATA[SELECT MailInboxStandard]]></oql>
			<do_search>1</do_search>
			<enable_admin_only>1</enable_admin_only>
		</menu>
	</menus>
</itop_design>
